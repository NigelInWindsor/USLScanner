/*++

Module Name:

    PmacServerMsg.h

Abstract:

    This file is generated by the MC tool from the PmacServerMsg.MC message
    file.

Author:

    Dennis Smith

Revision History:

--*/

#ifndef _PMACSERVERMSG_H
#define _PMACSERVERMSG_H

/////////////////////////////////////////////////////////////////////////////
// PMAC class messages
//
//  Values are 32 bit values layed out as follows:
//
//   3 3 2 2 2 2 2 2 2 2 2 2 1 1 1 1 1 1 1 1 1 1
//   1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0 9 8 7 6 5 4 3 2 1 0
//  +---+-+-+-----------------------+-------------------------------+
//  |Sev|C|R|     Facility          |               Code            |
//  +---+-+-+-----------------------+-------------------------------+
//
//  where
//
//      Sev - is the severity code
//
//          00 - Success
//          01 - Informational
//          10 - Warning
//          11 - Error
//
//      C - is the Customer code flag
//
//      R - is a reserved bit
//
//      Facility - is the facility code
//
//      Code - is the facility's status code
//
//
// Define the facility codes
//


//
// Define the severity codes
//


//
// MessageId: MSG_FATAL_FERR
//
// MessageText:
//
//  Fatal following error
//
#define MSG_FATAL_FERR                   ((DWORD)0xC0100001L)

//
// MessageId: MSG_WARN_FERR
//
// MessageText:
//
//  Warning following error
//
#define MSG_WARN_FERR                    ((DWORD)0xC0100002L)

//
// MessageId: MSG_SERVO_ERR
//
// MessageText:
//
//  Servo error
//
#define MSG_SERVO_ERR                    ((DWORD)0xC0100003L)

//
// MessageId: MSG_REENTRY_ERR
//
// MessageText:
//
//  PMAC calculation re-entry occured
//
#define MSG_REENTRY_ERR                  ((DWORD)0xC0100004L)

//
// MessageId: MSG_MEM_CHKSUM
//
// MessageText:
//
//  PMAC memory checksum is incorrect or not initialized
//
#define MSG_MEM_CHKSUM                   ((DWORD)0xC0100005L)

//
// MessageId: MSG_PROM_CHKSUM
//
// MessageText:
//
//  PMAC prom checksum is incorrect or not initialized
//
#define MSG_PROM_CHKSUM                  ((DWORD)0xC0100006L)

//
// MessageId: MSG_RUNTIME_ERR
//
// MessageText:
//
//  PMAC runtime error
//
#define MSG_RUNTIME_ERR                  ((DWORD)0xC0100007L)

//
// MessageId: MSG_CIR_RAD_ERR
//
// MessageText:
//
//  Circle radius error
//
#define MSG_CIR_RAD_ERR                  ((DWORD)0xC0100008L)

//
// MessageId: MSG_AMP_FAULT
//
// MessageText:
//
//  Amplifier fault error
//
#define MSG_AMP_FAULT                    ((DWORD)0xC0100009L)

//
// MessageId: MSG_MOTOR_NOT_ENABLED
//
// MessageText:
//
//  Motor not enabled
//
#define MSG_MOTOR_NOT_ENABLED            ((DWORD)0xC010000AL)

//
// MessageId: MSG_MOTOR_WARN_FERR
//
// MessageText:
//
//  Motor warning following error
//
#define MSG_MOTOR_WARN_FERR              ((DWORD)0xC010000BL)

//
// MessageId: MSG_MOTOR_FATAL_FERR
//
// MessageText:
//
//  Motor fatal following error
//
#define MSG_MOTOR_FATAL_FERR             ((DWORD)0xC010000CL)

//
// MessageId: MSG_MOTOR_NOT_HOMED
//
// MessageText:
//
//  Motor not home referenced
//
#define MSG_MOTOR_NOT_HOMED              ((DWORD)0xC010000DL)

//
// MessageId: MSG_MOTOR_ON_LIMIT
//
// MessageText:
//
//  Motor on limit
//
#define MSG_MOTOR_ON_LIMIT               ((DWORD)0xC010000EL)

//
// MessageId: MSG_MOTOR_ON_NEG_LIMIT
//
// MessageText:
//
//  Motor on negative end of travel limit
//
#define MSG_MOTOR_ON_NEG_LIMIT           ((DWORD)0xC010000FL)

//
// MessageId: MSG_MOTOR_ON_POS_LIMIT
//
// MessageText:
//
//  Motor on positive end of travel limit
//
#define MSG_MOTOR_ON_POS_LIMIT           ((DWORD)0xC0100010L)

//
// MessageId: MSG_MOTOR_OPEN_LOOP
//
// MessageText:
//
//  Motor open loop
//
#define MSG_MOTOR_OPEN_LOOP              ((DWORD)0xC0100011L)

//
// MessageId: MSG_MOTOR_AMP_FAULT
//
// MessageText:
//
//  Motor amplifier fault
//
#define MSG_MOTOR_AMP_FAULT              ((DWORD)0xC0100012L)

//
// MessageId: MSG_MOTOR_AMP_NOT_ENA
//
// MessageText:
//
//  Motor amplifier not enabled
//
#define MSG_MOTOR_AMP_NOT_ENA            ((DWORD)0xC0100013L)

//
// MessageId: MSG_MOTOR_DATA_BLOCK
//
// MessageText:
//
//  Motor data block error
//
#define MSG_MOTOR_DATA_BLOCK             ((DWORD)0xC0100014L)

//
// MessageId: MSG_MOTOR_PHASE
//
// MessageText:
//
//  Motor not phased
//
#define MSG_MOTOR_PHASE                  ((DWORD)0xC0100015L)

//
// MessageId: MSG_MOTOR_I2T
//
// MessageText:
//
//  I2T Error
//
#define MSG_MOTOR_I2T                    ((DWORD)0xC0100016L)

//
// MessageId: MSG_MOTOR_IFERR
//
// MessageText:
//
//  Motor integrated following error
//
#define MSG_MOTOR_IFERR                  ((DWORD)0xC0100017L)

//
// MessageId: MSG_RING_ERR
//
// MessageText:
//
//  MACRO auxiliary communication error
//
#define MSG_RING_ERR                     ((DWORD)0xC0100018L)

//
// MessageId: MSG_RING_IO_ERR
//
// MessageText:
//
//  MACRO ring check error
//
#define MSG_RING_IO_ERR                  ((DWORD)0xC0100019L)

//
// MessageId: MSG_CREATEDEVICE
//
// MessageText:
//
//  Failed to create device object
//
#define MSG_CREATEDEVICE                 ((DWORD)0xC010001AL)

//
// MessageId: ERR_TOMANYCTRLS
//
// MessageText:
//
//  Requested control number out of range
//
#define ERR_TOMANYCTRLS                  ((DWORD)0xC010001BL)

//
// MessageId: ERR_NODEVICE
//
// MessageText:
//
//  Unable to open PMAC device
//
#define ERR_NODEVICE                     ((DWORD)0xC010001CL)

//
// MessageId: ERR_DOWNLOADFAILED
//
// MessageText:
//
//  Download failed
//
#define ERR_DOWNLOADFAILED               ((DWORD)0xC010001DL)

//
// MessageId: MSG_OK
//
// MessageText:
//
//  The PMAC was successfully detected
//
#define MSG_OK                           ((DWORD)0x4010001EL)

//
// MessageId: ERR_001
//
// MessageText:
//
//  Command not allowed during program execution
//
#define ERR_001                          ((DWORD)0xC010001FL)

//
// MessageId: ERR_002
//
// MessageText:
//
//  Password not given
//
#define ERR_002                          ((DWORD)0xC0100020L)

//
// MessageId: ERR_003
//
// MessageText:
//
//  Data error or unrecognized command
//
#define ERR_003                          ((DWORD)0xC0100021L)

//
// MessageId: ERR_004
//
// MessageText:
//
//  Unknown communication error
//
#define ERR_004                          ((DWORD)0xC0100022L)

//
// MessageId: ERR_005
//
// MessageText:
//
//  Command not allowed unless buffer is open
//
#define ERR_005                          ((DWORD)0xC0100023L)

//
// MessageId: ERR_006
//
// MessageText:
//
//  No room in buffer for command
//
#define ERR_006                          ((DWORD)0xC0100024L)

//
// MessageId: ERR_007
//
// MessageText:
//
//  Buffer already in use
//
#define ERR_007                          ((DWORD)0xC0100025L)

//
// MessageId: ERR_008
//
// MessageText:
//
//  MACRO I/O Error
//
#define ERR_008                          ((DWORD)0xC0100026L)

//
// MessageId: ERR_009
//
// MessageText:
//
//  Program structural error
//
#define ERR_009                          ((DWORD)0xC0100027L)

//
// MessageId: ERR_010
//
// MessageText:
//
//  Both overtravel limits set for a motor in coordinate system
//
#define ERR_010                          ((DWORD)0xC0100028L)

//
// MessageId: ERR_011
//
// MessageText:
//
//  Previous move not comleted
//
#define ERR_011                          ((DWORD)0xC0100029L)

//
// MessageId: ERR_012
//
// MessageText:
//
//  A motor in the coordinate system is open loop
//
#define ERR_012                          ((DWORD)0xC010002AL)

//
// MessageId: ERR_013
//
// MessageText:
//
//  A motor in the coordinate system is not activated
//
#define ERR_013                          ((DWORD)0xC010002BL)

//
// MessageId: ERR_014
//
// MessageText:
//
//  There are no motors in the coordinate system
//
#define ERR_014                          ((DWORD)0xC010002CL)

//
// MessageId: ERR_015
//
// MessageText:
//
//  Not pointing to a valid program buffer
//
#define ERR_015                          ((DWORD)0xC010002DL)

//
// MessageId: ERR_016
//
// MessageText:
//
//  Running improperly structured program
//
#define ERR_016                          ((DWORD)0xC010002EL)

//
// MessageId: ERR_017
//
// MessageText:
//
//  Motors in the coordinate system not at halted position to restart
//
#define ERR_017                          ((DWORD)0xC010002FL)

//
// MessageId: ERR_018
//
// MessageText:
//
//  Illegal Motor Enable because of PHASING ERROR or is PHASING
//
#define ERR_018                          ((DWORD)0xC0100030L)

//
// MessageId: MSG_ERR_TIMEOUT
//
// MessageText:
//
//  Timeout during communication read
//
#define MSG_ERR_TIMEOUT                  ((DWORD)0xC0100031L)

//
// MessageId: MSG_ERR_USB_UNPLUGGED
//
// MessageText:
//
//  USB or Ethernet communication to PMAC failed / cable unplugged.
//
#define MSG_ERR_USB_UNPLUGGED            ((DWORD)0xC0100032L)

//
// MessageId: MSG_ERR_USB_PLUGGEDIN
//
// MessageText:
//
//  USB communication started to PMAC / cable plugged in.
//
#define MSG_ERR_USB_PLUGGEDIN            ((DWORD)0xC0100033L)

/////////////////////////////////////////////////////////////////////////////
// PMAC Variables class messages
/////////////////////////////////////////////////////////////////////////////
//
// MessageId: MSG_PMAC_I0
//
// MessageText:
//
//  PMAC Card Number
//
#define MSG_PMAC_I0                      ((DWORD)0x401088B8L)

//
// MessageId: MSG_PMAC_I1
//
// MessageText:
//
//  Serial Handshake Line Disable
//
#define MSG_PMAC_I1                      ((DWORD)0x401088B9L)

//
// MessageId: MSG_PMAC_I2
//
// MessageText:
//
//  Control Panel Disable
//
#define MSG_PMAC_I2                      ((DWORD)0x401088BAL)

//
// MessageId: MSG_PMAC_I3
//
// MessageText:
//
//  I/O Handshake Mode
//
#define MSG_PMAC_I3                      ((DWORD)0x401088BBL)

//
// MessageId: MSG_PMAC_I4
//
// MessageText:
//
//  Communications Checksum Enable
//
#define MSG_PMAC_I4                      ((DWORD)0x401088BCL)

//
// MessageId: MSG_PMAC_I5
//
// MessageText:
//
//  PLC Programs On/Off
//
#define MSG_PMAC_I5                      ((DWORD)0x401088BDL)

//
// MessageId: MSG_PMAC_I6
//
// MessageText:
//
//  Error Reporting Mode
//
#define MSG_PMAC_I6                      ((DWORD)0x401088BEL)

//
// MessageId: MSG_PMAC_I7
//
// MessageText:
//
//  In-Position No of Consecutive Cycles
//
#define MSG_PMAC_I7                      ((DWORD)0x401088BFL)

//
// MessageId: MSG_PMAC_I8
//
// MessageText:
//
//  Real Time Interrupt Period
//
#define MSG_PMAC_I8                      ((DWORD)0x401088C0L)

//
// MessageId: MSG_PMAC_I9
//
// MessageText:
//
//  Full/Abbrev. Listing Form
//
#define MSG_PMAC_I9                      ((DWORD)0x401088C1L)

//
// MessageId: MSG_PMAC_I10
//
// MessageText:
//
//  Servo Interrupt Time
//
#define MSG_PMAC_I10                     ((DWORD)0x401088C2L)

//
// MessageId: MSG_PMAC_I11
//
// MessageText:
//
//  Program Move Calc. Time
//
#define MSG_PMAC_I11                     ((DWORD)0x401088C3L)

//
// MessageId: MSG_PMAC_I12
//
// MessageText:
//
//  Jog-to-Pos. Calc. Time
//
#define MSG_PMAC_I12                     ((DWORD)0x401088C4L)

//
// MessageId: MSG_PMAC_I13
//
// MessageText:
//
//  Programmed Move Segmentation Time
//
#define MSG_PMAC_I13                     ((DWORD)0x401088C5L)

//
// MessageId: MSG_PMAC_I14
//
// MessageText:
//
//  Auto Position Match On Run Enable
//
#define MSG_PMAC_I14                     ((DWORD)0x401088C6L)

//
// MessageId: MSG_PMAC_I15
//
// MessageText:
//
//  Deg/Radians for User Trig
//
#define MSG_PMAC_I15                     ((DWORD)0x401088C7L)

//
// MessageId: MSG_PMAC_I16
//
// MessageText:
//
//  Rotary Buffer Request On Point
//
#define MSG_PMAC_I16                     ((DWORD)0x401088C8L)

//
// MessageId: MSG_PMAC_I17
//
// MessageText:
//
//  Rotary Buffer Request Off Point
//
#define MSG_PMAC_I17                     ((DWORD)0x401088C9L)

//
// MessageId: MSG_PMAC_I18
//
// MessageText:
//
//  Fixed Buffer Full Warning Point
//
#define MSG_PMAC_I18                     ((DWORD)0x401088CAL)

//
// MessageId: MSG_PMAC_I19
//
// MessageText:
//
//  Data Gathering Period (In Servo Cycles)
//
#define MSG_PMAC_I19                     ((DWORD)0x401088CBL)

//
// MessageId: MSG_PMAC_I20
//
// MessageText:
//
//  Data Gathering Selection Mask
//
#define MSG_PMAC_I20                     ((DWORD)0x401088CCL)

//
// MessageId: MSG_PMAC_I21
//
// MessageText:
//
//  Data Gathering Source 1 Address
//
#define MSG_PMAC_I21                     ((DWORD)0x401088CDL)

//
// MessageId: MSG_PMAC_I22
//
// MessageText:
//
//  Data Gathering Source 2 Address
//
#define MSG_PMAC_I22                     ((DWORD)0x401088CEL)

//
// MessageId: MSG_PMAC_I23
//
// MessageText:
//
//  Data Gathering Source 3 Address
//
#define MSG_PMAC_I23                     ((DWORD)0x401088CFL)

//
// MessageId: MSG_PMAC_I24
//
// MessageText:
//
//  Data Gathering Source 4 Address
//
#define MSG_PMAC_I24                     ((DWORD)0x401088D0L)

//
// MessageId: MSG_PMAC_I25
//
// MessageText:
//
//  Data Gathering Source 5 Address
//
#define MSG_PMAC_I25                     ((DWORD)0x401088D1L)

//
// MessageId: MSG_PMAC_I26
//
// MessageText:
//
//  Data Gathering Source 6 Address
//
#define MSG_PMAC_I26                     ((DWORD)0x401088D2L)

//
// MessageId: MSG_PMAC_I27
//
// MessageText:
//
//  Data Gathering Source 7 Address
//
#define MSG_PMAC_I27                     ((DWORD)0x401088D3L)

//
// MessageId: MSG_PMAC_I28
//
// MessageText:
//
//  Data Gathering Source 8 Address
//
#define MSG_PMAC_I28                     ((DWORD)0x401088D4L)

//
// MessageId: MSG_PMAC_I29
//
// MessageText:
//
//  Data Gathering Source 9 Address
//
#define MSG_PMAC_I29                     ((DWORD)0x401088D5L)

//
// MessageId: MSG_PMAC_I30
//
// MessageText:
//
//  Data Gathering Source 10 Address
//
#define MSG_PMAC_I30                     ((DWORD)0x401088D6L)

//
// MessageId: MSG_PMAC_I31
//
// MessageText:
//
//  Data Gathering Source 11 Address
//
#define MSG_PMAC_I31                     ((DWORD)0x401088D7L)

//
// MessageId: MSG_PMAC_I32
//
// MessageText:
//
//  Data Gathering Source 12 Address
//
#define MSG_PMAC_I32                     ((DWORD)0x401088D8L)

//
// MessageId: MSG_PMAC_I33
//
// MessageText:
//
//  Data Gathering Source 13 Address
//
#define MSG_PMAC_I33                     ((DWORD)0x401088D9L)

//
// MessageId: MSG_PMAC_I34
//
// MessageText:
//
//  Data Gathering Source 14 Address
//
#define MSG_PMAC_I34                     ((DWORD)0x401088DAL)

//
// MessageId: MSG_PMAC_I35
//
// MessageText:
//
//  Data Gathering Source 15 Address
//
#define MSG_PMAC_I35                     ((DWORD)0x401088DBL)

//
// MessageId: MSG_PMAC_I36
//
// MessageText:
//
//  Data Gathering Source 16 Address
//
#define MSG_PMAC_I36                     ((DWORD)0x401088DCL)

//
// MessageId: MSG_PMAC_I37
//
// MessageText:
//
//  Data Gathering Source 17 Address
//
#define MSG_PMAC_I37                     ((DWORD)0x401088DDL)

//
// MessageId: MSG_PMAC_I38
//
// MessageText:
//
//  Data Gathering Source 18 Address
//
#define MSG_PMAC_I38                     ((DWORD)0x401088DEL)

//
// MessageId: MSG_PMAC_I39
//
// MessageText:
//
//  Data Gathering Source 19 Address
//
#define MSG_PMAC_I39                     ((DWORD)0x401088DFL)

//
// MessageId: MSG_PMAC_I40
//
// MessageText:
//
//  Data Gathering Source 20 Address
//
#define MSG_PMAC_I40                     ((DWORD)0x401088E0L)

//
// MessageId: MSG_PMAC_I41
//
// MessageText:
//
//  Data Gathering Source 21 Address
//
#define MSG_PMAC_I41                     ((DWORD)0x401088E1L)

//
// MessageId: MSG_PMAC_I42
//
// MessageText:
//
//  Data Gathering Source 22 Address
//
#define MSG_PMAC_I42                     ((DWORD)0x401088E2L)

//
// MessageId: MSG_PMAC_I43
//
// MessageText:
//
//  Data Gathering Source 23 Address
//
#define MSG_PMAC_I43                     ((DWORD)0x401088E3L)

//
// MessageId: MSG_PMAC_I44
//
// MessageText:
//
//  Data Gathering Source 24 Address
//
#define MSG_PMAC_I44                     ((DWORD)0x401088E4L)

//
// MessageId: MSG_PMAC_I45
//
// MessageText:
//
//  Data Gathering Buffer Location And Mode
//
#define MSG_PMAC_I45                     ((DWORD)0x401088E5L)

//
// MessageId: MSG_PMAC_I46
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I46                     ((DWORD)0x401088E6L)

//
// MessageId: MSG_PMAC_I47
//
// MessageText:
//
//  Address Of Pointer For Control-W Command
//
#define MSG_PMAC_I47                     ((DWORD)0x401088E7L)

//
// MessageId: MSG_PMAC_I48
//
// MessageText:
//
//  DPRAM Servo Data Enable
//
#define MSG_PMAC_I48                     ((DWORD)0x401088E8L)

//
// MessageId: MSG_PMAC_I49
//
// MessageText:
//
//  DPRAM Background Data Enable
//
#define MSG_PMAC_I49                     ((DWORD)0x401088E9L)

//
// MessageId: MSG_PMAC_I50
//
// MessageText:
//
//  RAPID Mode Control
//
#define MSG_PMAC_I50                     ((DWORD)0x401088EAL)

//
// MessageId: MSG_PMAC_I51
//
// MessageText:
//
//  Leadscrew Compensation Enable
//
#define MSG_PMAC_I51                     ((DWORD)0x401088EBL)

//
// MessageId: MSG_PMAC_I52
//
// MessageText:
//
//  Feed Hold Slew Rate
//
#define MSG_PMAC_I52                     ((DWORD)0x401088ECL)

//
// MessageId: MSG_PMAC_I53
//
// MessageText:
//
//  Program Step Mode Control
//
#define MSG_PMAC_I53                     ((DWORD)0x401088EDL)

//
// MessageId: MSG_PMAC_I54
//
// MessageText:
//
//  Serial Baud Rate
//
#define MSG_PMAC_I54                     ((DWORD)0x401088EEL)

//
// MessageId: MSG_PMAC_I55
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I55                     ((DWORD)0x401088EFL)

//
// MessageId: MSG_PMAC_I56
//
// MessageText:
//
//  DPRAM Communications Interrup Enable
//
#define MSG_PMAC_I56                     ((DWORD)0x401088F0L)

//
// MessageId: MSG_PMAC_I57
//
// MessageText:
//
//  DPRAM Binary Rotary Buffer Enable
//
#define MSG_PMAC_I57                     ((DWORD)0x401088F1L)

//
// MessageId: MSG_PMAC_I58
//
// MessageText:
//
//  DPRAM ASCII Communications Enable
//
#define MSG_PMAC_I58                     ((DWORD)0x401088F2L)

//
// MessageId: MSG_PMAC_I59
//
// MessageText:
//
//  DPRAM Buffer Max Motor/CS Number
//
#define MSG_PMAC_I59                     ((DWORD)0x401088F3L)

//
// MessageId: MSG_PMAC_I60
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I60                     ((DWORD)0x401088F4L)

//
// MessageId: MSG_PMAC_I61
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I61                     ((DWORD)0x401088F5L)

//
// MessageId: MSG_PMAC_I62
//
// MessageText:
//
//  Internal Message Carriage Return Control
//
#define MSG_PMAC_I62                     ((DWORD)0x401088F6L)

//
// MessageId: MSG_PMAC_I63
//
// MessageText:
//
//  Control X echo
//
#define MSG_PMAC_I63                     ((DWORD)0x401088F7L)

//
// MessageId: MSG_PMAC_I64
//
// MessageText:
//
//  Unsolicited Responses tagged
//
#define MSG_PMAC_I64                     ((DWORD)0x401088F8L)

//
// MessageId: MSG_PMAC_I65
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I65                     ((DWORD)0x401088F9L)

//
// MessageId: MSG_PMAC_I66
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I66                     ((DWORD)0x401088FAL)

//
// MessageId: MSG_PMAC_I67
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I67                     ((DWORD)0x401088FBL)

//
// MessageId: MSG_PMAC_I68
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I68                     ((DWORD)0x401088FCL)

//
// MessageId: MSG_PMAC_I69
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I69                     ((DWORD)0x401088FDL)

//
// MessageId: MSG_PMAC_I70
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I70                     ((DWORD)0x401088FEL)

//
// MessageId: MSG_PMAC_I71
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I71                     ((DWORD)0x401088FFL)

//
// MessageId: MSG_PMAC_I72
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I72                     ((DWORD)0x40108900L)

//
// MessageId: MSG_PMAC_I73
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I73                     ((DWORD)0x40108901L)

//
// MessageId: MSG_PMAC_I74
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I74                     ((DWORD)0x40108902L)

//
// MessageId: MSG_PMAC_I75
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I75                     ((DWORD)0x40108903L)

//
// MessageId: MSG_PMAC_I76
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I76                     ((DWORD)0x40108904L)

//
// MessageId: MSG_PMAC_I77
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I77                     ((DWORD)0x40108905L)

//
// MessageId: MSG_PMAC_I78
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I78                     ((DWORD)0x40108906L)

//
// MessageId: MSG_PMAC_I79
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I79                     ((DWORD)0x40108907L)

//
// MessageId: MSG_PMAC_I80
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I80                     ((DWORD)0x40108908L)

//
// MessageId: MSG_PMAC_I81
//
// MessageText:
//
//  Motor 1 3rd Resolver Gear Ratio
//
#define MSG_PMAC_I81                     ((DWORD)0x40108909L)

//
// MessageId: MSG_PMAC_I82
//
// MessageText:
//
//  Motor 2 3rd Resolver Gear Ratio
//
#define MSG_PMAC_I82                     ((DWORD)0x4010890AL)

//
// MessageId: MSG_PMAC_I83
//
// MessageText:
//
//  Motor 3 3rd Resolver Gear Ratio
//
#define MSG_PMAC_I83                     ((DWORD)0x4010890BL)

//
// MessageId: MSG_PMAC_I84
//
// MessageText:
//
//  Motor 4 3rd Resolver Gear Ratio
//
#define MSG_PMAC_I84                     ((DWORD)0x4010890CL)

//
// MessageId: MSG_PMAC_I85
//
// MessageText:
//
//  Motor 5 3rd Resolver Gear Ratio
//
#define MSG_PMAC_I85                     ((DWORD)0x4010890DL)

//
// MessageId: MSG_PMAC_I86
//
// MessageText:
//
//  Motor 6 3rd Resolver Gear Ratio
//
#define MSG_PMAC_I86                     ((DWORD)0x4010890EL)

//
// MessageId: MSG_PMAC_I87
//
// MessageText:
//
//  Motor 7 3rd Resolver Gear Ratio
//
#define MSG_PMAC_I87                     ((DWORD)0x4010890FL)

//
// MessageId: MSG_PMAC_I88
//
// MessageText:
//
//  Motor 8 3rd Resolver Gear Ratio
//
#define MSG_PMAC_I88                     ((DWORD)0x40108910L)

//
// MessageId: MSG_PMAC_I89
//
// MessageText:
//
//  Cutter Comp Outside Corner Break
//
#define MSG_PMAC_I89                     ((DWORD)0x40108911L)

//
// MessageId: MSG_PMAC_I90
//
// MessageText:
//
//  Minimum Arc Angle
//
#define MSG_PMAC_I90                     ((DWORD)0x40108912L)

//
// MessageId: MSG_PMAC_I91
//
// MessageText:
//
//  Motor 1 2nd Resolver Gear Ratio
//
#define MSG_PMAC_I91                     ((DWORD)0x40108913L)

//
// MessageId: MSG_PMAC_I92
//
// MessageText:
//
//  Motor 2 2nd Resolver Gear Ratio
//
#define MSG_PMAC_I92                     ((DWORD)0x40108914L)

//
// MessageId: MSG_PMAC_I93
//
// MessageText:
//
//  "Motor 3 2nd Resolver Gear Ratio
//
#define MSG_PMAC_I93                     ((DWORD)0x40108915L)

//
// MessageId: MSG_PMAC_I94
//
// MessageText:
//
//  Motor 4 2nd Resolver Gear Ratio
//
#define MSG_PMAC_I94                     ((DWORD)0x40108916L)

//
// MessageId: MSG_PMAC_I95
//
// MessageText:
//
//  Motor 5 2nd Resolver Gear Ratio
//
#define MSG_PMAC_I95                     ((DWORD)0x40108917L)

//
// MessageId: MSG_PMAC_I96
//
// MessageText:
//
//  Motor 6 2nd Resolver Gear Ratio
//
#define MSG_PMAC_I96                     ((DWORD)0x40108918L)

//
// MessageId: MSG_PMAC_I97
//
// MessageText:
//
//  Motor 7 2nd Resolver Gear Ratio
//
#define MSG_PMAC_I97                     ((DWORD)0x40108919L)

//
// MessageId: MSG_PMAC_I98
//
// MessageText:
//
//  Motor 8 2nd Resolver Gear Ratio
//
#define MSG_PMAC_I98                     ((DWORD)0x4010891AL)

//
// MessageId: MSG_PMAC_I99
//
// MessageText:
//
//  Backlash Hysteresis
//
#define MSG_PMAC_I99                     ((DWORD)0x4010891BL)

/**  Motor S"pecific  **/
// Definition
//
// MessageId: MSG_PMAC_I100
//
// MessageText:
//
//  Motor %1 Activate
//
#define MSG_PMAC_I100                    ((DWORD)0x4010891CL)

//
// MessageId: MSG_PMAC_I101
//
// MessageText:
//
//  Motor %1 PMAC-Commutate Enable
//
#define MSG_PMAC_I101                    ((DWORD)0x4010891DL)

//
// MessageId: MSG_PMAC_I102
//
// MessageText:
//
//  Motor %1 Command Output Addr
//
#define MSG_PMAC_I102                    ((DWORD)0x4010891EL)

//
// MessageId: MSG_PMAC_I103
//
// MessageText:
//
//  Motor %1 Position Address
//
#define MSG_PMAC_I103                    ((DWORD)0x4010891FL)

//
// MessageId: MSG_PMAC_I104
//
// MessageText:
//
//  Motor %1 'Velocity' Address
//
#define MSG_PMAC_I104                    ((DWORD)0x40108920L)

//
// MessageId: MSG_PMAC_I105
//
// MessageText:
//
//  Motor %1 Master Position Address
//
#define MSG_PMAC_I105                    ((DWORD)0x40108921L)

//
// MessageId: MSG_PMAC_I106
//
// MessageText:
//
//  Motor %1 Master Follow Enable
//
#define MSG_PMAC_I106                    ((DWORD)0x40108922L)

//
// MessageId: MSG_PMAC_I107
//
// MessageText:
//
//  Motor %1 Master Scale Factor
//
#define MSG_PMAC_I107                    ((DWORD)0x40108923L)

//
// MessageId: MSG_PMAC_I108
//
// MessageText:
//
//  Motor %1 Position Scale Factor
//
#define MSG_PMAC_I108                    ((DWORD)0x40108924L)

//
// MessageId: MSG_PMAC_I109
//
// MessageText:
//
//  Motor %1 Velocity Scale Factor
//
#define MSG_PMAC_I109                    ((DWORD)0x40108925L)

//
// MessageId: MSG_PMAC_I110
//
// MessageText:
//
//  Motor %1 Power-on Servo Position Address
//
#define MSG_PMAC_I110                    ((DWORD)0x40108926L)

// Safety
//
// MessageId: MSG_PMAC_I111
//
// MessageText:
//
//  Motor %1 Fatal Following Error Limit
//
#define MSG_PMAC_I111                    ((DWORD)0x40108927L)

//
// MessageId: MSG_PMAC_I112
//
// MessageText:
//
//  Motor %1 Warning Following Error Limit
//
#define MSG_PMAC_I112                    ((DWORD)0x40108928L)

//
// MessageId: MSG_PMAC_I113
//
// MessageText:
//
//  Motor %1 + Software Position Limit
//
#define MSG_PMAC_I113                    ((DWORD)0x40108929L)

//
// MessageId: MSG_PMAC_I114
//
// MessageText:
//
//  Motor %1 - Software Position Limit
//
#define MSG_PMAC_I114                    ((DWORD)0x4010892AL)

//
// MessageId: MSG_PMAC_I115
//
// MessageText:
//
//  Motor %1 Abort/Lim Decel Rate
//
#define MSG_PMAC_I115                    ((DWORD)0x4010892BL)

//
// MessageId: MSG_PMAC_I116
//
// MessageText:
//
//  Motor %1 Maximum Velocity
//
#define MSG_PMAC_I116                    ((DWORD)0x4010892CL)

//
// MessageId: MSG_PMAC_I117
//
// MessageText:
//
//  Motor %1 Maximum Acceleration
//
#define MSG_PMAC_I117                    ((DWORD)0x4010892DL)

//
// MessageId: MSG_PMAC_I118
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I118                    ((DWORD)0x4010892EL)

//
// MessageId: MSG_PMAC_I119
//
// MessageText:
//
//  Motor %1 Maximum Jog Acceleration
//
#define MSG_PMAC_I119                    ((DWORD)0x4010892FL)

// Movement
//
// MessageId: MSG_PMAC_I120
//
// MessageText:
//
//  Motor %1 Jog/Home Acceleration Time
//
#define MSG_PMAC_I120                    ((DWORD)0x40108930L)

//
// MessageId: MSG_PMAC_I121
//
// MessageText:
//
//  Motor %1 Jog/Home S-Curve Time
//
#define MSG_PMAC_I121                    ((DWORD)0x40108931L)

//
// MessageId: MSG_PMAC_I122
//
// MessageText:
//
//  Motor %1 Jog Speed
//
#define MSG_PMAC_I122                    ((DWORD)0x40108932L)

//
// MessageId: MSG_PMAC_I123
//
// MessageText:
//
//  Motor %1 Homing Speed & Direction
//
#define MSG_PMAC_I123                    ((DWORD)0x40108933L)

//
// MessageId: MSG_PMAC_I124
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I124                    ((DWORD)0x40108934L)

//
// MessageId: MSG_PMAC_I125
//
// MessageText:
//
//  Motor %1 Flag Address
//
#define MSG_PMAC_I125                    ((DWORD)0x40108935L)

//
// MessageId: MSG_PMAC_I126
//
// MessageText:
//
//  Motor %1 Home Offset
//
#define MSG_PMAC_I126                    ((DWORD)0x40108936L)

//
// MessageId: MSG_PMAC_I127
//
// MessageText:
//
//  Motor %1 Position Rollover Range
//
#define MSG_PMAC_I127                    ((DWORD)0x40108937L)

//
// MessageId: MSG_PMAC_I128
//
// MessageText:
//
//  Motor %1 In-Position Band
//
#define MSG_PMAC_I128                    ((DWORD)0x40108938L)

//
// MessageId: MSG_PMAC_I129
//
// MessageText:
//
//  Motor %1 Output/1st Phase Offset
//
#define MSG_PMAC_I129                    ((DWORD)0x40108939L)

// Basic Servo
//
// MessageId: MSG_PMAC_I130
//
// MessageText:
//
//  Motor %1 Proportional Gain
//
#define MSG_PMAC_I130                    ((DWORD)0x4010893AL)

//
// MessageId: MSG_PMAC_I131
//
// MessageText:
//
//  Motor %1 Derivative Gain
//
#define MSG_PMAC_I131                    ((DWORD)0x4010893BL)

//
// MessageId: MSG_PMAC_I132
//
// MessageText:
//
//  Motor %1 Velocity Feed Forward Gain
//
#define MSG_PMAC_I132                    ((DWORD)0x4010893CL)

//
// MessageId: MSG_PMAC_I133
//
// MessageText:
//
//  Motor %1 Integral Gain
//
#define MSG_PMAC_I133                    ((DWORD)0x4010893DL)

//
// MessageId: MSG_PMAC_I134
//
// MessageText:
//
//  Motor %1 Integration Mode
//
#define MSG_PMAC_I134                    ((DWORD)0x4010893EL)

//
// MessageId: MSG_PMAC_I135
//
// MessageText:
//
//  Motor %1 Acceleration Feed Forward Gain
//
#define MSG_PMAC_I135                    ((DWORD)0x4010893FL)

//
// MessageId: MSG_PMAC_I136
//
// MessageText:
//
//  Motor %1 PID Notch Filter Coefficient N1
//
#define MSG_PMAC_I136                    ((DWORD)0x40108940L)

//
// MessageId: MSG_PMAC_I137
//
// MessageText:
//
//  Motor %1 PID Notch Filter Coefficient N2
//
#define MSG_PMAC_I137                    ((DWORD)0x40108941L)

//
// MessageId: MSG_PMAC_I138
//
// MessageText:
//
//  Motor %1 PID Notch Filter Coefficient D1
//
#define MSG_PMAC_I138                    ((DWORD)0x40108942L)

//
// MessageId: MSG_PMAC_I139
//
// MessageText:
//
//  Motor %1 PID Notch Filter Coefficient D2
//
#define MSG_PMAC_I139                    ((DWORD)0x40108943L)

// Servo Control I-vars
//
// MessageId: MSG_PMAC_I140
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I140                    ((DWORD)0x40108944L)

//
// MessageId: MSG_PMAC_I141
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I141                    ((DWORD)0x40108945L)

//
// MessageId: MSG_PMAC_I142
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I142                    ((DWORD)0x40108946L)

//
// MessageId: MSG_PMAC_I143
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I143                    ((DWORD)0x40108947L)

//
// MessageId: MSG_PMAC_I144
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I144                    ((DWORD)0x40108948L)

//
// MessageId: MSG_PMAC_I145
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I145                    ((DWORD)0x40108949L)

//
// MessageId: MSG_PMAC_I146
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I146                    ((DWORD)0x4010894AL)

//
// MessageId: MSG_PMAC_I147
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I147                    ((DWORD)0x4010894BL)

//
// MessageId: MSG_PMAC_I148
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I148                    ((DWORD)0x4010894CL)

//
// MessageId: MSG_PMAC_I149
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I149                    ((DWORD)0x4010894DL)

//
// MessageId: MSG_PMAC_I150
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I150                    ((DWORD)0x4010894EL)

//
// MessageId: MSG_PMAC_I151
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I151                    ((DWORD)0x4010894FL)

//
// MessageId: MSG_PMAC_I152
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I152                    ((DWORD)0x40108950L)

//
// MessageId: MSG_PMAC_I153
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I153                    ((DWORD)0x40108951L)

//
// MessageId: MSG_PMAC_I154
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I154                    ((DWORD)0x40108952L)

//
// MessageId: MSG_PMAC_I155
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I155                    ((DWORD)0x40108953L)

//
// MessageId: MSG_PMAC_I156
//
// MessageText:
//
//  Motor %1 Extended Servo Loop I-Variable
//
#define MSG_PMAC_I156                    ((DWORD)0x40108954L)

// Servo Loop Mods
//
// MessageId: MSG_PMAC_I157
//
// MessageText:
//
//  Motor %1 Continuous Current Limit
//
#define MSG_PMAC_I157                    ((DWORD)0x40108955L)

//
// MessageId: MSG_PMAC_I158
//
// MessageText:
//
//  Motor %1 Integrated Current Limit
//
#define MSG_PMAC_I158                    ((DWORD)0x40108956L)

//
// MessageId: MSG_PMAC_I159
//
// MessageText:
//
//  Motor %1 User Written Servo Enable
//
#define MSG_PMAC_I159                    ((DWORD)0x40108957L)

//
// MessageId: MSG_PMAC_I160
//
// MessageText:
//
//  Motor %1 Servo Cycle Period Extension
//
#define MSG_PMAC_I160                    ((DWORD)0x40108958L)

//
// MessageId: MSG_PMAC_I161
//
// MessageText:
//
//  Motor %1 Current Loop Integral Gain
//
#define MSG_PMAC_I161                    ((DWORD)0x40108959L)

//
// MessageId: MSG_PMAC_I162
//
// MessageText:
//
//  Motor %1 Current Loop Prop. Gain (Forward Path)
//
#define MSG_PMAC_I162                    ((DWORD)0x4010895AL)

//
// MessageId: MSG_PMAC_I163
//
// MessageText:
//
//  Motor %1 Integration Limit
//
#define MSG_PMAC_I163                    ((DWORD)0x4010895BL)

//
// MessageId: MSG_PMAC_I164
//
// MessageText:
//
//  Motor %1 'Deadband Gain'
//
#define MSG_PMAC_I164                    ((DWORD)0x4010895CL)

//
// MessageId: MSG_PMAC_I165
//
// MessageText:
//
//  Motor %1 Deadband Size
//
#define MSG_PMAC_I165                    ((DWORD)0x4010895DL)

//
// MessageId: MSG_PMAC_I166
//
// MessageText:
//
//  Motor %1 PWM Scale Factor
//
#define MSG_PMAC_I166                    ((DWORD)0x4010895EL)

//
// MessageId: MSG_PMAC_I167
//
// MessageText:
//
//  Motor %1 Position Error Limit
//
#define MSG_PMAC_I167                    ((DWORD)0x4010895FL)

//
// MessageId: MSG_PMAC_I168
//
// MessageText:
//
//  Motor %1 Friction Feedforward
//
#define MSG_PMAC_I168                    ((DWORD)0x40108960L)

//
// MessageId: MSG_PMAC_I169
//
// MessageText:
//
//  Motor %1 Output Command Limit
//
#define MSG_PMAC_I169                    ((DWORD)0x40108961L)

// Commutation
//
// MessageId: MSG_PMAC_I170
//
// MessageText:
//
//  Motor %1 Number of Commutation Cycles (N)
//
#define MSG_PMAC_I170                    ((DWORD)0x40108962L)

//
// MessageId: MSG_PMAC_I171
//
// MessageText:
//
//  Motor %1 Counts/N Commutation Cycles
//
#define MSG_PMAC_I171                    ((DWORD)0x40108963L)

//
// MessageId: MSG_PMAC_I172
//
// MessageText:
//
//  Motor %1 Commutation Phase Angle
//
#define MSG_PMAC_I172                    ((DWORD)0x40108964L)

//
// MessageId: MSG_PMAC_I173
//
// MessageText:
//
//  Motor %1 Phase Finding Output Value
//
#define MSG_PMAC_I173                    ((DWORD)0x40108965L)

//
// MessageId: MSG_PMAC_I174
//
// MessageText:
//
//  Motor %1 Phase Finding Time
//
#define MSG_PMAC_I174                    ((DWORD)0x40108966L)

//
// MessageId: MSG_PMAC_I175
//
// MessageText:
//
//  Motor %1 Power-On Phase Position Offset
//
#define MSG_PMAC_I175                    ((DWORD)0x40108967L)

//
// MessageId: MSG_PMAC_I176
//
// MessageText:
//
//  Motor %1 Current-Loop Proportional Gain (Back Path)
//
#define MSG_PMAC_I176                    ((DWORD)0x40108968L)

//
// MessageId: MSG_PMAC_I177
//
// MessageText:
//
//  Motor %1 Magnetization Current
//
#define MSG_PMAC_I177                    ((DWORD)0x40108969L)

//
// MessageId: MSG_PMAC_I178
//
// MessageText:
//
//  Motor %1 Slip Gain
//
#define MSG_PMAC_I178                    ((DWORD)0x4010896AL)

//
// MessageId: MSG_PMAC_I179
//
// MessageText:
//
//  "Motor %1 2nd Phase Offset
//
#define MSG_PMAC_I179                    ((DWORD)0x4010896BL)

//
// MessageId: MSG_PMAC_I180
//
// MessageText:
//
//  Motor %1 Power-Up Mode
//
#define MSG_PMAC_I180                    ((DWORD)0x4010896CL)

//
// MessageId: MSG_PMAC_I181
//
// MessageText:
//
//  Motor %1 Power-On Phase Position Address
//
#define MSG_PMAC_I181                    ((DWORD)0x4010896DL)

//
// MessageId: MSG_PMAC_I182
//
// MessageText:
//
//  Motor %1 Current loop feedback address
//
#define MSG_PMAC_I182                    ((DWORD)0x4010896EL)

//
// MessageId: MSG_PMAC_I183
//
// MessageText:
//
//  Motor %1 Commutation Position Address
//
#define MSG_PMAC_I183                    ((DWORD)0x4010896FL)

//
// MessageId: MSG_PMAC_I184
//
// MessageText:
//
//  Motor %1 Current-Loop Feedback Mask Word
//
#define MSG_PMAC_I184                    ((DWORD)0x40108970L)

// Back lash
//
// MessageId: MSG_PMAC_I185
//
// MessageText:
//
//  Motor %1 Backlash Takeup Rate
//
#define MSG_PMAC_I185                    ((DWORD)0x40108971L)

//
// MessageId: MSG_PMAC_I186
//
// MessageText:
//
//  Motor %1 Backlash Size
//
#define MSG_PMAC_I186                    ((DWORD)0x40108972L)

/**  Coordinate Specific  **/
/* CSx */
//
// MessageId: MSG_PMAC_I187
//
// MessageText:
//
//  C.S. %1 Default Acceleration Time
//
#define MSG_PMAC_I187                    ((DWORD)0x40108973L)

//
// MessageId: MSG_PMAC_I188
//
// MessageText:
//
//  C.S. %1 Default S-Curve Time
//
#define MSG_PMAC_I188                    ((DWORD)0x40108974L)

//
// MessageId: MSG_PMAC_I189
//
// MessageText:
//
//  C.S. %1 Default Feedrate
//
#define MSG_PMAC_I189                    ((DWORD)0x40108975L)

//
// MessageId: MSG_PMAC_I190
//
// MessageText:
//
//  C.S. %1 Feedrate Time Units
//
#define MSG_PMAC_I190                    ((DWORD)0x40108976L)

//
// MessageId: MSG_PMAC_I191
//
// MessageText:
//
//  C.S. %1 Default Working Program Number
//
#define MSG_PMAC_I191                    ((DWORD)0x40108977L)

//
// MessageId: MSG_PMAC_I192
//
// MessageText:
//
//  C.S. %1 Move Blend Disable
//
#define MSG_PMAC_I192                    ((DWORD)0x40108978L)

//
// MessageId: MSG_PMAC_I193
//
// MessageText:
//
//  C.S. %1 Time Base Address
//
#define MSG_PMAC_I193                    ((DWORD)0x40108979L)

//
// MessageId: MSG_PMAC_I194
//
// MessageText:
//
//  C.S. %1 Time Base Slew Rate
//
#define MSG_PMAC_I194                    ((DWORD)0x4010897AL)

//
// MessageId: MSG_PMAC_I195
//
// MessageText:
//
//  C.S. %1 FeedHold Decel  Rate
//
#define MSG_PMAC_I195                    ((DWORD)0x4010897BL)

//
// MessageId: MSG_PMAC_I196
//
// MessageText:
//
//  C.S. %1 Circle Error Limit
//
#define MSG_PMAC_I196                    ((DWORD)0x4010897CL)

//
// MessageId: MSG_PMAC_I197
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I197                    ((DWORD)0x4010897DL)

//
// MessageId: MSG_PMAC_I198
//
// MessageText:
//
//  C.S. %1 Maximum Feedrate
//
#define MSG_PMAC_I198                    ((DWORD)0x4010897EL)

//
// MessageId: MSG_PMAC_I199
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I199                    ((DWORD)0x4010897FL)

/**  Global Gate Array I-Variables  **/
//
// MessageId: MSG_PMAC_I200
//
// MessageText:
//
//  MaxPhase and PWM 1-4 Frequency Control
//
#define MSG_PMAC_I200                    ((DWORD)0x40108980L)

//
// MessageId: MSG_PMAC_I201
//
// MessageText:
//
//  Phase Clock Frequency Control
//
#define MSG_PMAC_I201                    ((DWORD)0x40108981L)

//
// MessageId: MSG_PMAC_I202
//
// MessageText:
//
//  Servo Clock Frequency Control
//
#define MSG_PMAC_I202                    ((DWORD)0x40108982L)

//
// MessageId: MSG_PMAC_I203
//
// MessageText:
//
//  Hardware Clock Control Channels 1-4
//
#define MSG_PMAC_I203                    ((DWORD)0x40108983L)

//
// MessageId: MSG_PMAC_I204
//
// MessageText:
//
//  PWM 1-4 Deadtime/PFM 1-4 Pulse Width Control
//
#define MSG_PMAC_I204                    ((DWORD)0x40108984L)

//
// MessageId: MSG_PMAC_I205
//
// MessageText:
//
//  "DAC 1-4 Strobe Word
//
#define MSG_PMAC_I205                    ((DWORD)0x40108985L)

//
// MessageId: MSG_PMAC_I206
//
// MessageText:
//
//  PWM 5-8 Frequency Control
//
#define MSG_PMAC_I206                    ((DWORD)0x40108986L)

//
// MessageId: MSG_PMAC_I207
//
// MessageText:
//
//  Hardware Clock Control Channels 5-8
//
#define MSG_PMAC_I207                    ((DWORD)0x40108987L)

//
// MessageId: MSG_PMAC_I208
//
// MessageText:
//
//  PWM 5-8 Deadtime/PFM 5-8 Pulse Width Control
//
#define MSG_PMAC_I208                    ((DWORD)0x40108988L)

//
// MessageId: MSG_PMAC_I209
//
// MessageText:
//
//  DAC 5-8 Strobe Word
//
#define MSG_PMAC_I209                    ((DWORD)0x40108989L)

/* Channel-Specific Gate Array I-Vars */
//
// MessageId: MSG_PMAC_I210
//
// MessageText:
//
//  Encoder/Timer %1 Decode Control
//
#define MSG_PMAC_I210                    ((DWORD)0x4010898AL)

//
// MessageId: MSG_PMAC_I211
//
// MessageText:
//
//  Position Compare %1 Channel Select
//
#define MSG_PMAC_I211                    ((DWORD)0x4010898BL)

//
// MessageId: MSG_PMAC_I212
//
// MessageText:
//
//  Encoder %1 Capture Control
//
#define MSG_PMAC_I212                    ((DWORD)0x4010898CL)

//
// MessageId: MSG_PMAC_I213
//
// MessageText:
//
//  Capture %1 Flag Select Control
//
#define MSG_PMAC_I213                    ((DWORD)0x4010898DL)

//
// MessageId: MSG_PMAC_I214
//
// MessageText:
//
//  Encoder %1 Gated Index Select
//
#define MSG_PMAC_I214                    ((DWORD)0x4010898EL)

//
// MessageId: MSG_PMAC_I215
//
// MessageText:
//
//  Encoder %1 Index Gate State
//
#define MSG_PMAC_I215                    ((DWORD)0x4010898FL)

//
// MessageId: MSG_PMAC_I216
//
// MessageText:
//
//  Output %1 Mode Select
//
#define MSG_PMAC_I216                    ((DWORD)0x40108990L)

//
// MessageId: MSG_PMAC_I217
//
// MessageText:
//
//  Output %1 Invert Control
//
#define MSG_PMAC_I217                    ((DWORD)0x40108991L)

//
// MessageId: MSG_PMAC_I218
//
// MessageText:
//
//  Output %1 PFM Direction Signal Invert Control
//
#define MSG_PMAC_I218                    ((DWORD)0x40108992L)

//
// MessageId: MSG_PMAC_I219
//
// MessageText:
//
//  (Reserved for Future Use)
//
#define MSG_PMAC_I219                    ((DWORD)0x40108993L)

/* DSPGate2 I-Vars I990-1005*/
//
// MessageId: MSG_PMAC_I220
//
// MessageText:
//
//  Handwheel 1 Decode Control
//
#define MSG_PMAC_I220                    ((DWORD)0x40108994L)

//
// MessageId: MSG_PMAC_I221
//
// MessageText:
//
//  Handwheel 2 Decode Control
//
#define MSG_PMAC_I221                    ((DWORD)0x40108995L)

//
// MessageId: MSG_PMAC_I222
//
// MessageText:
//
//  MaxPhase and PWM 1*-2*
//
#define MSG_PMAC_I222                    ((DWORD)0x40108996L)

//
// MessageId: MSG_PMAC_I223
//
// MessageText:
//
//  Hardware Clock Control Channels 1*-2*
//
#define MSG_PMAC_I223                    ((DWORD)0x40108997L)

//
// MessageId: MSG_PMAC_I224
//
// MessageText:
//
//  PWM 1*-2* Deadtime / PFM 1 * Pulse Width Control
//
#define MSG_PMAC_I224                    ((DWORD)0x40108998L)

//
// MessageId: MSG_PMAC_I225
//
// MessageText:
//
//  MACRO Ring Configuration/Status
//
#define MSG_PMAC_I225                    ((DWORD)0x40108999L)

//
// MessageId: MSG_PMAC_I226
//
// MessageText:
//
//  MACRO Node Activate Control
//
#define MSG_PMAC_I226                    ((DWORD)0x4010899AL)

//
// MessageId: MSG_PMAC_I227
//
// MessageText:
//
//  "Phase Clock Frequency Control
//
#define MSG_PMAC_I227                    ((DWORD)0x4010899BL)

//
// MessageId: MSG_PMAC_I228
//
// MessageText:
//
//  Servo Clock Frequency Control
//
#define MSG_PMAC_I228                    ((DWORD)0x4010899CL)

//
// MessageId: MSG_PMAC_I229
//
// MessageText:
//
//  (Reserved for future use)
//
#define MSG_PMAC_I229                    ((DWORD)0x4010899DL)

//
// MessageId: MSG_PMAC_I230
//
// MessageText:
//
//  MACRO Node Auxiliary Register Enable
//
#define MSG_PMAC_I230                    ((DWORD)0x4010899EL)

//
// MessageId: MSG_PMAC_I231
//
// MessageText:
//
//  MACRO Ring Check Period
//
#define MSG_PMAC_I231                    ((DWORD)0x4010899FL)

//
// MessageId: MSG_PMAC_I232
//
// MessageText:
//
//  MACRO Node Protocol Type Control
//
#define MSG_PMAC_I232                    ((DWORD)0x401089A0L)

//
// MessageId: MSG_PMAC_I233
//
// MessageText:
//
//  "MACRO Type 1 Auxiliary Communications Timeout
//
#define MSG_PMAC_I233                    ((DWORD)0x401089A1L)

//
// MessageId: MSG_PMAC_I234
//
// MessageText:
//
//  MACRO Ring Error Shutdown Count
//
#define MSG_PMAC_I234                    ((DWORD)0x401089A2L)

//
// MessageId: MSG_PMAC_I235
//
// MessageText:
//
//  MACRO Ring Sync Packet Shutdown Count
//
#define MSG_PMAC_I235                    ((DWORD)0x401089A3L)

//
// MessageId: MSG_PMAC_IRESERVED
//
// MessageText:
//
//  (Reserved for future use)
//
#define MSG_PMAC_IRESERVED               ((DWORD)0x401089A4L)

/////////////////////////////////////////////////////////////////////////////
// PMAC-NC class messages
/////////////////////////////////////////////////////////////////////////////
//
// MessageId: MSG_STARTOFPROGRAM
//
// MessageText:
//
//  Start of Main Program: %1
//
#define MSG_STARTOFPROGRAM               ((DWORD)0x40110001L)

//
// MessageId: MSG_RESTARTOFPROGRAM
//
// MessageText:
//
//  Restart of Main Program: %1
//
#define MSG_RESTARTOFPROGRAM             ((DWORD)0x40110002L)

//
// MessageId: MSG_SINGLECYCLE
//
// MessageText:
//
//  Program single cycle start commanded
//
#define MSG_SINGLECYCLE                  ((DWORD)0x40110003L)

//
// MessageId: MSG_AMPKILLED
//
// MessageText:
//
//  Amplifiers disable commanded
//
#define MSG_AMPKILLED                    ((DWORD)0x40110004L)

//
// MessageId: MSG_SINGLECYCLE2
//
// MessageText:
//
//  Program step hold with restart commanded
//
#define MSG_SINGLECYCLE2                 ((DWORD)0x40110005L)

//
// MessageId: MSG_CYCLEQUIT
//
// MessageText:
//
//  Program quit commanded
//
#define MSG_CYCLEQUIT                    ((DWORD)0x40110006L)

//
// MessageId: MSG_PMAC_RESET_TIMEOUT
//
// MessageText:
//
//  Reset function did not occur in time or failed. Check reset program (reset.pmc) as functional. 
//
#define MSG_PMAC_RESET_TIMEOUT           ((DWORD)0x40110007L)

//
// MessageId: MSG_SUBROUTINERETURN
//
// MessageText:
//
//  M99 - Subroutine %1 return
//
#define MSG_SUBROUTINERETURN             ((DWORD)0x40110008L)

//
// MessageId: MSG_SUBROUTINEREPEAT
//
// MessageText:
//
//  M99 - Subroutine %1, Repeat %2
//
#define MSG_SUBROUTINEREPEAT             ((DWORD)0x40110009L)

//
// MessageId: MSG_SUBROUTINECALL
//
// MessageText:
//
//  M98 - Subroutine %1 called
//
#define MSG_SUBROUTINECALL               ((DWORD)0x4011000AL)

//
// MessageId: MSG_G65_SUBROUTINECALL
//
// MessageText:
//
//  G65 - Subroutine %1 called
//
#define MSG_G65_SUBROUTINECALL           ((DWORD)0x4011000BL)

//
// MessageId: MSG_ENDOFPROGRAM
//
// MessageText:
//
//  End of Main Program: %1
//
#define MSG_ENDOFPROGRAM                 ((DWORD)0x4011000CL)

//
// MessageId: MSG_M2_ENDOFPROGRAM
//
// MessageText:
//
//  M02 - End of Main Program: %1
//
#define MSG_M2_ENDOFPROGRAM              ((DWORD)0x4011000DL)

//
// MessageId: MSG_M30_ENDOFPROGRAM
//
// MessageText:
//
//  M30 - End of Main Program: %1
//
#define MSG_M30_ENDOFPROGRAM             ((DWORD)0x4011000EL)

//
// MessageId: MSG_M99_ENDOFPROGRAM
//
// MessageText:
//
//  M99 - End of Main Program: %1
//
#define MSG_M99_ENDOFPROGRAM             ((DWORD)0x4011000FL)

//
// MessageId: MSG_IMPLIED_M99_WARNING
//
// MessageText:
//
//  M99 is missing from subroutine: %1
//
#define MSG_IMPLIED_M99_WARNING          ((DWORD)0x40110010L)

//
// MessageId: MSG_FEEDHOLD1
//
// MessageText:
//
//  Program feed hold with restart commanded
//
#define MSG_FEEDHOLD1                    ((DWORD)0x40110011L)

//
// MessageId: MSG_CYCLESTART
//
// MessageText:
//
//  Program auto cycle start commanded
//
#define MSG_CYCLESTART                   ((DWORD)0x40110012L)

//
// MessageId: MSG_FEEDHOLD2
//
// MessageText:
//
//  Program feed hold commanded
//
#define MSG_FEEDHOLD2                    ((DWORD)0x40110013L)

//
// MessageId: MSG_ABORT
//
// MessageText:
//
//  Program abort commanded
//
#define MSG_ABORT                        ((DWORD)0x40110014L)

//
// MessageId: MSG_ERRHOMEAXIS
//
// MessageText:
//
//  All axis must be homed before AUTO or MDI operation: Axis(s) %1 are not homed
//
#define MSG_ERRHOMEAXIS                  ((DWORD)0x40110015L)

//
// MessageId: MSG_FILE_NOT_OPENED
//
// MessageText:
//
//  Unable to open %1 file
//
#define MSG_FILE_NOT_OPENED              ((DWORD)0x40110016L)

//
// MessageId: MSG_RIGHTHAND
//
// MessageText:
//
//  Right Hand
//
#define MSG_RIGHTHAND                    ((DWORD)0x40110017L)

//
// MessageId: MSG_LEFTHAND
//
// MessageText:
//
//  Left Hand
//
#define MSG_LEFTHAND                     ((DWORD)0x40110018L)

//
// MessageId: MSG_NEUTRALHAND
//
// MessageText:
//
//  Neutral
//
#define MSG_NEUTRALHAND                  ((DWORD)0x40110019L)

//
// MessageId: MSG_TOOLTYPE1
//
// MessageText:
//
//  End Mill
//
#define MSG_TOOLTYPE1                    ((DWORD)0x4011001AL)

//
// MessageId: MSG_TOOLTYPE2
//
// MessageText:
//
//  Ball End Mill
//
#define MSG_TOOLTYPE2                    ((DWORD)0x4011001BL)

//
// MessageId: MSG_TOOLTYPE3
//
// MessageText:
//
//  Drill
//
#define MSG_TOOLTYPE3                    ((DWORD)0x4011001CL)

//
// MessageId: MSG_TOOLTYPE4
//
// MessageText:
//
//  "Counter Sink
//
#define MSG_TOOLTYPE4                    ((DWORD)0x4011001DL)

//
// MessageId: MSG_TOOLTYPE5
//
// MessageText:
//
//  Center Drill
//
#define MSG_TOOLTYPE5                    ((DWORD)0x4011001EL)

//
// MessageId: MSG_TOOLTYPE6
//
// MessageText:
//
//  Insert Mill
//
#define MSG_TOOLTYPE6                    ((DWORD)0x4011001FL)

//
// MessageId: MSG_TOOLTYPE7
//
// MessageText:
//
//  Lathe Insert
//
#define MSG_TOOLTYPE7                    ((DWORD)0x40110020L)

//
// MessageId: MSG_OFFSETUNSAFE
//
// MessageText:
//
//  You cannot set the %1 axis offset before homing
//
#define MSG_OFFSETUNSAFE                 ((DWORD)0x40110021L)

//
// MessageId: MSG_TOOLCHANGE
//
// MessageText:
//
//  Tool Offset Change
//
#define MSG_TOOLCHANGE                   ((DWORD)0x40110022L)

//
// MessageId: MSG_SEARCH_ILLEGAL
//
// MessageText:
//
//  Search is not allowed in a Subroutine
//
#define MSG_SEARCH_ILLEGAL               ((DWORD)0x40110023L)

//
// MessageId: MSG_OFFSETWARNEXT
//
// MessageText:
//
//  You have requested to change G54.1P%1 axis %2 from %3 to %4. Do you wish to keep the new offset of %5 %6?
//
#define MSG_OFFSETWARNEXT                ((DWORD)0x40110024L)

//
// MessageId: MSG_OFFSETWARN
//
// MessageText:
//
//  You have requested to change G%1 axis %2 from %3 to %4. Do you wish to keep the new offset of %5 %6?
//
#define MSG_OFFSETWARN                   ((DWORD)0x40110025L)

//
// MessageId: MSG_TOOLWARN
//
// MessageText:
//
//  You have changed tool %1 %2 from %3 to %4. Do you wish to keep the new value of %5 %6?
//
#define MSG_TOOLWARN                     ((DWORD)0x40110026L)

//
// MessageId: MSG_REWINDPROGRUNNING
//
// MessageText:
//
//  A program is currently running. You must first stop the program in order to rewind. 
//
#define MSG_REWINDPROGRUNNING            ((DWORD)0x40110027L)

//
// MessageId: MSG_PROGRUNNING
//
// MessageText:
//
//  The program is not stopped. You must first stop the program in order to do this function. 
//
#define MSG_PROGRUNNING                  ((DWORD)0x40110028L)

//
// MessageId: MSG_WAITLOADINGPROG
//
// MessageText:
//
//  Please wait while program is loading. 
//
#define MSG_WAITLOADINGPROG              ((DWORD)0x40110029L)

//
// MessageId: MSG_WAITCOMPLETE
//
// MessageText:
//
//  Loading complete! 
//
#define MSG_WAITCOMPLETE                 ((DWORD)0x4011002AL)

///// Errors
//
// MessageId: MSG_M_ALIAS_FILE_NOT_FOUND
//
// MessageText:
//
//  Unable to open M code alias file: %1
//
#define MSG_M_ALIAS_FILE_NOT_FOUND       ((DWORD)0xC011002BL)

//
// MessageId: MSG_G65_FILE_NOT_FOUND
//
// MessageText:
//
//  Unable to open G65 subroutine file: %1
//
#define MSG_G65_FILE_NOT_FOUND           ((DWORD)0xC011002CL)

//
// MessageId: MSG_M98_FILE_NOT_FOUND
//
// MessageText:
//
//  Unable to open M98 subroutine file: %1
//
#define MSG_M98_FILE_NOT_FOUND           ((DWORD)0xC011002DL)

//
// MessageId: MSG_G65_NOFILE_IN_CODE
//
// MessageText:
//
//  G65 subroutine call with no file name
//
#define MSG_G65_NOFILE_IN_CODE           ((DWORD)0xC011002EL)

//
// MessageId: MSG_M98_NOFILE_IN_CODE
//
// MessageText:
//
//  M98 subroutine call with no file name
//
#define MSG_M98_NOFILE_IN_CODE           ((DWORD)0xC011002FL)

//
// MessageId: MSG_DIVISION_BY_ZERO
//
// MessageText:
//
//  Division by zero
//
#define MSG_DIVISION_BY_ZERO             ((DWORD)0xC0110030L)

//
// MessageId: MSG_ROOT_OF_NEGATIVE
//
// MessageText:
//
//  Root of negative number
//
#define MSG_ROOT_OF_NEGATIVE             ((DWORD)0xC0110031L)

//
// MessageId: MSG_MATCHING_END_NOT_FOUND
//
// MessageText:
//
//  Matching END not found
//
#define MSG_MATCHING_END_NOT_FOUND       ((DWORD)0xC0110032L)

//
// MessageId: MSG_BLOCK_NOT_FOUND
//
// MessageText:
//
//  Block specified in branch, not found
//
#define MSG_BLOCK_NOT_FOUND              ((DWORD)0xC0110033L)

//
// MessageId: MSG_DO_LOOP_ALREADY_USED
//
// MessageText:
//
//  DO loop already being used
//
#define MSG_DO_LOOP_ALREADY_USED         ((DWORD)0xC0110034L)

//
// MessageId: MSG_INVALID_DO_END_LOOP
//
// MessageText:
//
//  Invalid DO END loop number
//
#define MSG_INVALID_DO_END_LOOP          ((DWORD)0xC0110035L)

//
// MessageId: MSG_NO_MATCHING_DO_LOOP
//
// MessageText:
//
//  No matching DO loop prior to this block
//
#define MSG_NO_MATCHING_DO_LOOP          ((DWORD)0xC0110036L)

//
// MessageId: MSG_MULTIPLE_CODES_IN_BLOCK
//
// MessageText:
//
//  Multiple codes specified in block
//
#define MSG_MULTIPLE_CODES_IN_BLOCK      ((DWORD)0xC0110037L)

//
// MessageId: MSG_FEATURE_NOT_IMPLEMENTED
//
// MessageText:
//
//  Feature not implemented
//
#define MSG_FEATURE_NOT_IMPLEMENTED      ((DWORD)0xC0110038L)

//
// MessageId: MSG_ILLEGAL_VAR_REF
//
// MessageText:
//
//  Illegal variable reference
//
#define MSG_ILLEGAL_VAR_REF              ((DWORD)0xC0110039L)

//
// MessageId: MSG_TERM_EXPECTED
//
// MessageText:
//
//  Term expected
//
#define MSG_TERM_EXPECTED                ((DWORD)0xC011003AL)

//
// MessageId: MSG_VALUE_STACK_ERROR
//
// MessageText:
//
//  Value stack error
//
#define MSG_VALUE_STACK_ERROR            ((DWORD)0xC011003BL)

//
// MessageId: MSG_OPERATOR_EXPECTED
//
// MessageText:
//
//  Operator expected
//
#define MSG_OPERATOR_EXPECTED            ((DWORD)0xC011003CL)

//
// MessageId: MSG_ILLEGAL_VARIABLE
//
// MessageText:
//
//  Illegal variable
//
#define MSG_ILLEGAL_VARIABLE             ((DWORD)0xC011003DL)

//
// MessageId: MSG_INVALID_VAR_ASGN
//
// MessageText:
//
//  Invalid variable assignment
//
#define MSG_INVALID_VAR_ASGN             ((DWORD)0xC011003EL)

//
// MessageId: MSG_UNBALANCED_PAREN
//
// MessageText:
//
//  Unbalanced parenthesis
//
#define MSG_UNBALANCED_PAREN             ((DWORD)0xC011003FL)

//
// MessageId: MSG_STRING_CONV_TO_DBL_OVR
//
// MessageText:
//
//  String conversion to double, overflow
//
#define MSG_STRING_CONV_TO_DBL_OVR       ((DWORD)0xC0110040L)

//
// MessageId: MSG_STRING_CONV_TO_DBL_TOO_MANY
//
// MessageText:
//
//  String conversion to double, too many digits
//
#define MSG_STRING_CONV_TO_DBL_TOO_MANY  ((DWORD)0xC0110041L)

//
// MessageId: MSG_ONLY_ONE_ASSIGNMENT_ALLOWED
//
// MessageText:
//
//  Only one assignment per block permitted
//
#define MSG_ONLY_ONE_ASSIGNMENT_ALLOWED  ((DWORD)0xC0110042L)

//
// MessageId: MSG_ASGN_MUST_BE_FIRST
//
// MessageText:
//
//  Assignment must be first term in expression
//
#define MSG_ASGN_MUST_BE_FIRST           ((DWORD)0xC0110043L)

//
// MessageId: MSG_506X_COMM_ERR
//
// MessageText:
//
//  PMAC communications error: #506x
//
#define MSG_506X_COMM_ERR                ((DWORD)0xC0110044L)

//
// MessageId: MSG_OPERAND_STACK_ERROR
//
// MessageText:
//
//  Operand stack errors
//
#define MSG_OPERAND_STACK_ERROR          ((DWORD)0xC0110045L)

//
// MessageId: MSG_MAX_G_CODE_LINE_EXCEEDED
//
// MessageText:
//
//  Maximum G code line exceeded
//
#define MSG_MAX_G_CODE_LINE_EXCEEDED     ((DWORD)0xC0110046L)

//
// MessageId: MSG_ARG_PRECEED_PP_SYNTAX
//
// MessageText:
//
//  Arguments preceed parametric programming syntax
//
#define MSG_ARG_PRECEED_PP_SYNTAX        ((DWORD)0xC0110047L)

//
// MessageId: MSG_ARG_PRECEED_G65
//
// MessageText:
//
//  Arguments preceed G65
//
#define MSG_ARG_PRECEED_G65              ((DWORD)0xC0110048L)

//
// MessageId: MSG_G65_NESTING_EXCEEDED
//
// MessageText:
//
//  G65 nesting levels exceeded
//
#define MSG_G65_NESTING_EXCEEDED         ((DWORD)0xC0110049L)

//
// MessageId: MSG_OPERAND_STACK_UNDERFLOW
//
// MessageText:
//
//  Operand stack underflow
//
#define MSG_OPERAND_STACK_UNDERFLOW      ((DWORD)0xC011004AL)

//
// MessageId: MSG_ILLEGAL_FUNCTION_PARAMETER
//
// MessageText:
//
//  Illegal function parameter
//
#define MSG_ILLEGAL_FUNCTION_PARAMETER   ((DWORD)0xC011004BL)

//
// MessageId: MSG_ILLEGAL_MACRO_VAR_REFERENCE
//
// MessageText:
//
//  Illegal macro variable reference
//
#define MSG_ILLEGAL_MACRO_VAR_REFERENCE  ((DWORD)0xC011004CL)

//
// MessageId: MSG_M99_P_NOTFOUND
//
// MessageText:
//
//  M99 with P code unable to find label in return
//
#define MSG_M99_P_NOTFOUND               ((DWORD)0xC011004DL)

//
// MessageId: MSG_ADRS_HAS_NO_VALUE
//
// MessageText:
//
//  Address code value not found or is invalid
//
#define MSG_ADRS_HAS_NO_VALUE            ((DWORD)0xC011004EL)

//
// MessageId: MSG_PQ_BLOCKS_EXCEEDED
//
// MessageText:
//
//  Exceeded max blocks in PQ sequence
//
#define MSG_PQ_BLOCKS_EXCEEDED           ((DWORD)0xC011004FL)

//
// MessageId: MSG_ILLEGAL_USE_G2G3
//
// MessageText:
//
//  Illegal use of G2/G3
//
#define MSG_ILLEGAL_USE_G2G3             ((DWORD)0xC0110050L)

//
// MessageId: MSG_ILLEGAL_USE_R
//
// MessageText:
//
//  Illegal use of R code
//
#define MSG_ILLEGAL_USE_R                ((DWORD)0xC0110051L)

//
// MessageId: MSG_ILLEGAL_CANNED_CYCLE
//
// MessageText:
//
//  Illegal canned cycle structure
//
#define MSG_ILLEGAL_CANNED_CYCLE         ((DWORD)0xC0110052L)

//
// MessageId: MSG_NOFILE_IN_CODE
//
// MessageText:
//
//  Missing filename or file number
//
#define MSG_NOFILE_IN_CODE               ((DWORD)0xC0110053L)

//
// MessageId: MSG_FILE_NOT_FOUND
//
// MessageText:
//
//  Unable to locate input file
//
#define MSG_FILE_NOT_FOUND               ((DWORD)0xC0110054L)

//
// MessageId: MSG_NORVECTOR
//
// MessageText:
//
//  Spline mode requires vector(R) value
//
#define MSG_NORVECTOR                    ((DWORD)0xC0110055L)

//
// MessageId: MSG_CODE_REQUIRED
//
// MessageText:
//
//  %1 code is required
//
#define MSG_CODE_REQUIRED                ((DWORD)0xC0110056L)

//
// MessageId: MSG_CODE_INVALID
//
// MessageText:
//
//  %1 code is invalid
//
#define MSG_CODE_INVALID                 ((DWORD)0xC0110057L)

//
// MessageId: MSG_PP_LOOP_INTERSECT
//
// MessageText:
//
//  Intersecting DO loops detected
//
#define MSG_PP_LOOP_INTERSECT            ((DWORD)0xC0110058L)

//
// MessageId: MSG_UNKNOWN_EXTERNAL_ERR
//
// MessageText:
//
//  Unknown error supplied by application
//
#define MSG_UNKNOWN_EXTERNAL_ERR         ((DWORD)0xC0110059L)

//
// MessageId: MSG_MLTLTH_MISSINGPARAM
//
// MessageText:
//
//  Missing parameter for on repetitive cycle, correct usage is G71/G72 P_ Q_ U W_ [F_ S_ T_]
//
#define MSG_MLTLTH_MISSINGPARAM          ((DWORD)0xC011005AL)

//
// MessageId: MSG_MLTLTH_MEMERR
//
// MessageText:
//
//  Memory error could not allocate memory for G71,G72 or G73
//
#define MSG_MLTLTH_MEMERR                ((DWORD)0xC011005BL)

//
// MessageId: MSG_MLTLTH_ZEROPARAM
//
// MessageText:
//
//  Neither U or W can be 0 on G71/G72 P_ Q_ U_ W_ line
//
#define MSG_MLTLTH_ZEROPARAM             ((DWORD)0xC011005CL)

//
// MessageId: MSG_MLTLTH_SETUPLINE
//
// MessageText:
//
//  Invalid cut depth  or escape value, neither U_ W_ or R_ can be 0 on G71 U_ R_ or G72 W_ R line
//
#define MSG_MLTLTH_SETUPLINE             ((DWORD)0xC011005DL)

//
// MessageId: MSG_MLTLTH_BADSEQ
//
// MessageText:
//
//  N label matching Q label found before N label matching P, check P_ Q_ on G7x P_ Q_ line and the N labels following the command
//
#define MSG_MLTLTH_BADSEQ                ((DWORD)0xC011005EL)

//
// MessageId: MSG_MLTLTH_NOIKR
//
// MessageText:
//
//  No I, K or R command found on G2/G3 block
//
#define MSG_MLTLTH_NOIKR                 ((DWORD)0xC011005FL)

//
// MessageId: MSG_MLTLTH_BADIK
//
// MessageText:
//
//  Invalid I or K value on G2/G3 line
//
#define MSG_MLTLTH_BADIK                 ((DWORD)0xC0110060L)

//
// MessageId: MSG_MLTLTH_BADR
//
// MessageText:
//
//  Invalid R value on G2/G3 line
//
#define MSG_MLTLTH_BADR                  ((DWORD)0xC0110061L)

//
// MessageId: MSG_MLTLTH_NONMONOTONE
//
// MessageText:
//
//  Pattern in P-Q sequence is non monontonic or ( U_ and  W_) signs are incorrect
//
#define MSG_MLTLTH_NONMONOTONE           ((DWORD)0xC0110062L)

//
// MessageId: MSG_MLTLTH_2BLKSMIN
//
// MessageText:
//
//  At least two finish blocks must be specified in the P-Q sequence
//
#define MSG_MLTLTH_2BLKSMIN              ((DWORD)0xC0110063L)

//
// MessageId: MSG_MLTLTH_NOINTER
//
// MessageText:
//
//  No P-Q intersection found
//
#define MSG_MLTLTH_NOINTER               ((DWORD)0xC0110064L)

//
// MessageId: MSG_IMLTLTH_NOPQ
//
// MessageText:
//
//  Both P and Q must be specified for G70 finish block
//
#define MSG_IMLTLTH_NOPQ                 ((DWORD)0xC0110065L)

//
// MessageId: MSG_MLTLTH_PQNOTINMEM
//
// MessageText:
//
//  The P-Q sequence for G70 was not found in memory, you must have used the P-Q blocks in a G71,G72 or G73 previously
//
#define MSG_MLTLTH_PQNOTINMEM            ((DWORD)0xC0110066L)

//
// MessageId: MSG_ERRNOPROGRAM
//
// MessageText:
//
//  Program/MDI buffer is empty
//
#define MSG_ERRNOPROGRAM                 ((DWORD)0xC0110067L)

//
// MessageId: MSG_G41G42NOTALLOWED
//
// MessageText:
//
//  G45-G48 (tool offset) must not be used in the G41 or G42 (cutter compensation) mode.
//
#define MSG_G41G42NOTALLOWED             ((DWORD)0xC0110068L)

#endif // PmacServerMsg
